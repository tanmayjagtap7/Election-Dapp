{"ast":null,"code":"var _jsxFileName = \"F:\\\\GitHub\\\\Election Dapp\\\\client\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport Electionabi from './contracts/Election.json';\nimport Web3 from \"web3\";\nimport Navbar from './Components/Navbar';\nimport Content from './Components/Content';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [currentAccount, setCurrentAccount] = useState('');\n  const [loader, setLoader] = useState(true);\n  const [electionData, setElectionData] = useState();\n  const [candidate1, setCandidate1] = useState();\n  const [candidate2, setCandidate2] = useState();\n  useEffect(() => {\n    loadWeb3();\n    loadBlockchaindata();\n  }, []);\n\n  const loadWeb3 = async () => {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert(\"Non-Ethereum browser detected. You should consider trying metamask!\");\n    }\n  };\n\n  const loadBlockchaindata = async () => {\n    setLoader(true);\n    const web3 = window.web3;\n    const accounts = await web3.eth.getAccounts();\n    const account = accounts[0];\n    setCurrentAccount(account);\n    const networkId = await web3.eth.net.getId();\n    const networkData = Electionabi.networks[networkId];\n\n    if (networkData) {\n      const election = new web3.eth.Contract(Electionabi.abi, networkData.address);\n      const candidate1 = await election.methods.candidates(1).call();\n      const candidate2 = await election.methods.candidates(2).call();\n      setCandidate1(candidate1);\n      setCandidate2(candidate2);\n      setElectionData(election);\n      setLoader(false);\n      console.log(election);\n    } else {\n      window.alert(\"The smart contract is not deployed current network\");\n    }\n  };\n\n  if (loader) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex align-items-center justify-content-center\",\n        style: {\n          minHeight: '100vh'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"spinner-grow text-primary\",\n          role: \"status\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"sr-only\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      currentAccount: currentAccount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Content, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"01L7BEOemIEmRkf8YGQ5Rw+N7Xk=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["F:/GitHub/Election Dapp/client/src/App.js"],"names":["useEffect","useState","Electionabi","Web3","Navbar","Content","App","currentAccount","setCurrentAccount","loader","setLoader","electionData","setElectionData","candidate1","setCandidate1","candidate2","setCandidate2","loadWeb3","loadBlockchaindata","window","ethereum","web3","enable","currentProvider","alert","accounts","eth","getAccounts","account","networkId","net","getId","networkData","networks","election","Contract","abi","address","methods","candidates","call","console","log","minHeight"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport Electionabi from './contracts/Election.json';\nimport Web3 from \"web3\";\nimport Navbar from './Components/Navbar';\nimport Content from './Components/Content';\n\nfunction App() {\n\n  const [currentAccount, setCurrentAccount] = useState('');\n  const [loader, setLoader] = useState(true);\n  const [electionData, setElectionData] = useState();\n  const [candidate1, setCandidate1] = useState();\n  const [candidate2, setCandidate2] = useState();\n\n  useEffect(() => {\n    loadWeb3();\n    loadBlockchaindata();\n  }, [])\n\n  const loadWeb3 = async () => {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    }\n    else {\n      window.alert(\n        \"Non-Ethereum browser detected. You should consider trying metamask!\"\n      )\n    }\n  }\n\n  const loadBlockchaindata = async () => {\n    setLoader(true);\n    const web3 = window.web3;\n\n    const accounts = await web3.eth.getAccounts();\n    const account = accounts[0];\n    setCurrentAccount(account);\n\n    const networkId = await web3.eth.net.getId();\n\n    const networkData = Electionabi.networks[networkId];\n\n    if (networkData) {\n      const election = new web3.eth.Contract(Electionabi.abi, networkData.address);\n      const candidate1 = await election.methods.candidates(1).call();\n      const candidate2 = await election.methods.candidates(2).call();\n\n      setCandidate1(candidate1);\n      setCandidate2(candidate2);\n      setElectionData(election);\n      setLoader(false);\n      console.log(election);\n    }\n    else {\n      window.alert(\"The smart contract is not deployed current network\")\n    }\n  }\n\n  if (loader) {\n    return (\n      <div className=\"container\">\n        <div className=\"d-flex align-items-center justify-content-center\" style={{minHeight:'100vh'}}>\n          <div className=\"spinner-grow text-primary\" role=\"status\">\n            <span className=\"sr-only\"></span>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"App\">\n      <Navbar currentAccount={currentAccount} />\n      <Content/>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}